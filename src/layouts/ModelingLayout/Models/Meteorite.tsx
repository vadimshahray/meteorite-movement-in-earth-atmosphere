/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: NASA Astromaterials 3D (https://sketchfab.com/Astromaterials3D)
license: CC0-1.0 (http://creativecommons.org/publicdomain/zero/1.0/)
source: https://sketchfab.com/3d-models/antarctic-meteorite-sample-lar-1232632-9518395c58084c6f883d903daa886460
title: Antarctic Meteorite Sample LAR 12326,32
*/

import { Float, PresentationControls, useGLTF } from '@react-three/drei'
import React from 'react'
import * as THREE from 'three'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Object_2: THREE.Mesh
    Object_3: THREE.Mesh
  }
  materials: {
    material_1: THREE.MeshStandardMaterial
  }
}

const METEORITE_SCALE = 50
export const METEORITE_RADIUS = 0.029682245448234786 * METEORITE_SCALE

const MeteoriteModel = React.memo(() => {
  const { nodes, materials } = useGLTF(
    '/models/meteorite/scene.gltf',
  ) as unknown as GLTFResult

  return (
    <group
      dispose={null}
      scale={METEORITE_SCALE}
      position={[-METEORITE_RADIUS, 0, 0]}
      rotation={[Math.PI / 14, 0, -Math.PI / 2]}
    >
      <mesh
        geometry={nodes.Object_2.geometry}
        material={materials.material_1}
      />
      <mesh
        geometry={nodes.Object_3.geometry}
        material={materials.material_1}
      />
    </group>
  )
})

export type MeteoriteProps = {
  isPresentationMode: boolean
}

export const Meteorite = React.memo<MeteoriteProps>(
  ({ isPresentationMode }) => {
    return (
      <Float speed={isPresentationMode ? undefined : 0}>
        <PresentationControls
          enabled={isPresentationMode}
          snap
          speed={2}
          polar={[-Infinity, Infinity]}
          azimuth={[-Infinity, Infinity]}
          config={{ mass: 1, tension: 170, friction: 26 }}
        >
          <MeteoriteModel />
        </PresentationControls>
      </Float>
    )
  },
)
